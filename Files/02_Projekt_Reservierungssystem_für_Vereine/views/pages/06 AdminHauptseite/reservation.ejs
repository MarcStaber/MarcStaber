<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title> Reservierungsseite f√ºr Vereine </title>
  <link rel="stylesheet" href="http://localhost:3000/static/stylesheetReservierung.css">
  <script src="https://kit.fontawesome.com/24eb8f8898.js" crossorigin="anonymous"></script>

</head>

<body>

  <header class="mainHeader" id="Start">
    <img class= "logo"src="http://localhost:3000/static/logo.png" alt="Hier sollte ein Logo Stehen">
    <flexitem></flexitem>
    <div class="mainHeader1">
      <h1>   <%= club[0].characteristic %></h1>
      <p> <%= club[6].characteristic %></p>
    </div>
    <flexitem>
      <i class="fa-sharp fa-solid fa-user"></i>
      <p><%= account[0].first_name %></p>
    </flexitem>
    <img class= "logo"src="http://localhost:3000/static/logo.png" alt="Hier sollte ein Logo Stehen">
    
  </header>

  <nav class="topnav" id="Top">
    <a href="/vereinverwaltung"> Vereinverwaltung</a>
    <a class="active" href="reservierung"> Reservierung</a>
    <a href="/adminpage"> Benutzerverwaltung</a>

  </nav>

  <section class="mainPart" id="reservation">
<div class="addEventButton">
    <a href="#" id="addEventButton">Hier klicken um zu reservieren!</a>
</div>

    


<div id="calendar"></div>

<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
<script>

function getCommonCalendarConfig(events = []) {
    return {
        initialView: 'timeGridWeek',
        firstDay: 1,
        fixedWeekCount: true,
        slotDuration: '00:30:00',
        slotLabelInterval: '01:00',
        slotMinTime: '07:00:00',
        slotMaxTime: '24:00:00',
        snapDuration: '00:15:00',
        slotLabelFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false,
            omitZeroMinute: false,
        },
        allDaySlot: false,
        events: events,
        headerToolbar: {
            left: 'prev,next today, myCustomButton1,myCustomButton2',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay',
        },
        customButtons: {
            myCustomButton1: {
                text: 'Platz 1',
                click: function() {
                    console.log('Button 1 clicked');
                }
            },
            myCustomButton2: {
                text: 'Platz 2',
                click: function() {
                    console.log('Button 2 clicked');
                }
            },
        },
        locale: 'de',
        dayHeaderFormat: {
            weekday: 'long',
            month: 'numeric',
            day: 'numeric',
            year: 'numeric',
        },
        views: {
            dayGridMonth: {
                dayHeaderFormat: { weekday: 'long' },
            },
        },
        buttonText: {
            today: 'Heute',
            week: 'Woche',
            day: 'Tag',
            month: 'Monat',
        },
    };
}
   

var calendar;

document.addEventListener('DOMContentLoaded', function() {
    var calendarEl = document.getElementById('calendar');

    var eventData = []; // Initialize with any existing events or empty
    var calendarConfig = getCommonCalendarConfig(eventData);

    // Initialize the calendar once and store the reference
    calendar = new FullCalendar.Calendar(calendarEl, calendarConfig);
    calendar.render();
});

// Function to add new events to the existing calendar
function addNewEvent(eventData) {
    if (calendar) { // Ensure the calendar instance is defined
        calendar.addEvent(eventData); // Add the new event to the existing calendar
    } else {
        console.error("Calendar instance not found");
    }
}

document.getElementById('addEventButton').addEventListener('click', function(event) {
    event.preventDefault(); // Prevent default anchor behavior
    window.open('/eventAdmin', 'AddEvent', 'width=400, height=600'); // Open a popup for adding events
});


</script>
</section>
</body>
</html>
